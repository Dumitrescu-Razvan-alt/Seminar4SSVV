# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src.algorithms as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.binary_search(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_0.binary_search(set_0, set_0)
    assert var_0 == -1
    module_0.fibonacci(set_0)


def test_case_2():
    set_0 = set()
    none_type_0 = None
    var_0 = module_0.binary_search(set_0, none_type_0)
    assert var_0 == -1
    str_0 = "/0zi"
    var_1 = module_0.binary_search(str_0, str_0)
    assert var_1 == -1
    with pytest.raises(ValueError):
        module_0.fibonacci(var_1)


def test_case_3():
    int_0 = 1551
    var_0 = module_0.fibonacci(int_0)
    assert (
        var_0
        == 617085050817689597616784866157784434613974877406761135503777626331924986929736420863371183077950433695181786919488016391177915998497482190855838124327364403592819109734051021966592013588225712136104543023192596459961683275020974212115660705494988996254691873959359135447083371005112300256198761728861920286586793804554687074
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    var_0 = module_0.fibonacci(bool_0)
    assert var_0 is True
    none_type_0 = None
    module_0.binary_search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "#"
    var_0 = module_0.binary_search(str_0, str_0)
    assert var_0 == 0
    var_1 = module_1.object()
    module_0.fibonacci(str_0)
