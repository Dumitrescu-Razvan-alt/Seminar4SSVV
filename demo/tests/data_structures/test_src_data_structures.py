# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src.data_structures as module_0


def test_case_0():
    bool_0 = True
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "src.data_structures.Node"
    )
    assert node_0.value is None
    assert node_0.next is None
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.append(none_type_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.find(linked_list_0)
    assert var_1 is False
    var_2 = linked_list_0.delete(bool_0)
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "zzV"
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.add(str_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.append(var_0)
    assert linked_list_0.size == 2
    var_2 = linked_list_0.find(linked_list_0)
    assert var_2 is False
    linked_list_1 = module_0.LinkedList()
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_1.head is None
    assert linked_list_1.size == 0
    var_1.append(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 186
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.find(int_0)
    assert var_0 is False
    var_0.get_size()


def test_case_3():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.find(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.delete(bool_0)
    assert var_1 is False


def test_case_4():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    none_type_0 = None
    var_0 = linked_list_0.add(none_type_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.add(var_0)
    assert linked_list_0.size == 2


def test_case_5():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.add(linked_list_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.is_empty()
    assert var_1 is False
    var_2 = linked_list_0.is_empty()
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.get_size()
    assert var_0 == 0
    var_0.append(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "zzVj4"
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.append(str_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.add(str_0)
    assert linked_list_0.size == 2
    var_2 = linked_list_0.append(var_1)
    assert linked_list_0.size == 3
    linked_list_1 = module_0.LinkedList()
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_1.head is None
    assert linked_list_1.size == 0
    var_3 = linked_list_1.find(linked_list_0)
    assert var_3 is False
    var_1.delete(linked_list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "zzVj4"
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.append(linked_list_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.find(linked_list_0)
    assert var_1 is True
    linked_list_1 = module_0.LinkedList()
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_1.head is None
    assert linked_list_1.size == 0
    var_2 = linked_list_1.find(linked_list_0)
    assert var_2 is False
    var_3 = linked_list_0.delete(str_0)
    assert var_3 is False
    var_4 = linked_list_0.append(linked_list_0)
    assert linked_list_0.size == 2
    var_3.append(var_4)


@pytest.mark.xfail(strict=True)
def test_case_9():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.add(linked_list_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.delete(linked_list_0)
    assert var_1 is True
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    linked_list_1 = module_0.LinkedList()
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_1.head is None
    assert linked_list_1.size == 0
    var_2 = linked_list_0.append(linked_list_1)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_2.find(var_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "zzVj4"
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.add(str_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.append(var_0)
    assert linked_list_0.size == 2
    var_2 = linked_list_0.add(linked_list_0)
    assert linked_list_0.size == 3
    linked_list_1 = module_0.LinkedList()
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_1.head is None
    assert linked_list_1.size == 0
    var_3 = linked_list_1.find(linked_list_0)
    assert var_3 is False
    var_4 = linked_list_0.delete(str_0)
    assert var_4 is True
    assert linked_list_0.size == 2
    var_5 = linked_list_0.append(linked_list_0)
    assert linked_list_0.size == 3
    var_4.append(var_5)


@pytest.mark.xfail(strict=True)
def test_case_11():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.add(linked_list_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.append(var_0)
    assert linked_list_0.size == 2
    var_2 = linked_list_0.add(linked_list_0)
    assert linked_list_0.size == 3
    linked_list_1 = module_0.LinkedList()
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_1.head is None
    assert linked_list_1.size == 0
    var_3 = linked_list_1.find(linked_list_0)
    assert var_3 is False
    var_4 = linked_list_0.delete(var_3)
    assert var_4 is False
    var_1.get_size()


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "-c"
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    none_type_0 = None
    var_0 = linked_list_0.append(none_type_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.append(linked_list_0)
    assert linked_list_0.size == 2
    var_2 = linked_list_0.add(linked_list_0)
    assert linked_list_0.size == 3
    var_3 = linked_list_0.append(str_0)
    assert linked_list_0.size == 4
    set_0 = {var_2}
    var_4 = linked_list_0.delete(set_0)
    assert var_4 is False
    var_5 = linked_list_0.get_size()
    assert var_5 == 4
    linked_list_1 = module_0.LinkedList()
    assert (
        f"{type(linked_list_1).__module__}.{type(linked_list_1).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_1.head is None
    assert linked_list_1.size == 0
    var_3.find(var_5)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "zzVj4"
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "src.data_structures.LinkedList"
    )
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_0 = linked_list_0.append(str_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.add(str_0)
    assert linked_list_0.size == 2
    var_2 = linked_list_0.append(var_1)
    assert linked_list_0.size == 3
    var_3 = linked_list_0.delete(var_1)
    assert var_3 is True
    assert linked_list_0.size == 2
    var_3.find(linked_list_0)
