# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src.inventory as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    product_0 = module_0.Product(bool_0, bool_0, bool_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id is False
    assert product_0.name is False
    assert product_0.price is False
    assert product_0.quantity == 0
    var_0 = product_0.restock(bool_0)
    int_0 = 453
    var_1 = product_0.restock(int_0)
    assert product_0.quantity == 453
    product_0.update_price(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    bool_0 = False
    product_0 = module_0.Product(none_type_0, none_type_0, bool_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id is None
    assert product_0.name is None
    assert product_0.price is False
    assert product_0.quantity == 0
    var_0 = product_0.sell(bool_0)
    assert var_0 == 0
    var_0.get_product(product_0)


def test_case_2():
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_0 = inventory_0.get_product(inventory_0)


def test_case_3():
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_0 = inventory_0.remove_product(inventory_0)
    assert var_0 is False


def test_case_4():
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_0 = inventory_0.total_inventory_value()
    assert var_0 == 0


def test_case_5():
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}


@pytest.mark.xfail(strict=True)
def test_case_6():
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    product_0 = module_0.Product(inventory_0, inventory_0, inventory_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert (
        f"{type(product_0.product_id).__module__}.{type(product_0.product_id).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert (
        f"{type(product_0.name).__module__}.{type(product_0.name).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert (
        f"{type(product_0.price).__module__}.{type(product_0.price).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert product_0.quantity == 0
    var_0 = inventory_0.add_product(product_0)
    assert (
        f"{type(inventory_0.products).__module__}.{type(inventory_0.products).__qualname__}"
        == "builtins.dict"
    )
    assert len(inventory_0.products) == 1
    none_type_0 = None
    product_0.update_price(none_type_0)


def test_case_7():
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_0 = inventory_0.list_products()


def test_case_8():
    str_0 = "/zE\x0bK=d\\^>\r>E"
    product_0 = module_0.Product(str_0, str_0, str_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id == "/zE\x0bK=d\\^>\r>E"
    assert product_0.name == "/zE\x0bK=d\\^>\r>E"
    assert product_0.price == "/zE\x0bK=d\\^>\r>E"
    assert product_0.quantity == 0
    int_0 = 625
    with pytest.raises(ValueError):
        product_0.sell(int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    bool_0 = False
    product_0 = module_0.Product(none_type_0, none_type_0, bool_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id is None
    assert product_0.name is None
    assert product_0.price is False
    assert product_0.quantity == 0
    var_0 = product_0.sell(bool_0)
    assert var_0 == 0
    var_1 = product_0.update_price(bool_0)
    var_1.total_inventory_value()


def test_case_10():
    str_0 = "Price cannot be negative"
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_0 = inventory_0.get_product(str_0)
    float_0 = -537.1
    inventory_1 = module_0.Inventory()
    assert (
        f"{type(inventory_1).__module__}.{type(inventory_1).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_1.products == {}
    none_type_0 = None
    product_0 = module_0.Product(inventory_1, none_type_0, inventory_1)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert (
        f"{type(product_0.product_id).__module__}.{type(product_0.product_id).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert product_0.name is None
    assert (
        f"{type(product_0.price).__module__}.{type(product_0.price).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert product_0.quantity == 0
    with pytest.raises(ValueError):
        product_0.update_price(float_0)


def test_case_11():
    int_0 = -2053
    list_0 = [int_0]
    none_type_0 = None
    product_0 = module_0.Product(int_0, int_0, none_type_0, list_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id == -2053
    assert product_0.name == -2053
    assert product_0.price is None
    assert product_0.quantity == [-2053]
    with pytest.raises(ValueError):
        product_0.restock(int_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    bool_0 = False
    product_0 = module_0.Product(none_type_0, none_type_0, bool_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id is None
    assert product_0.name is None
    assert product_0.price is False
    assert product_0.quantity == 0
    var_0 = product_0.sell(bool_0)
    assert var_0 == 0
    var_1 = product_0.update_price(bool_0)
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_2 = inventory_0.total_inventory_value()
    assert var_2 == 0
    inventory_1 = module_0.Inventory()
    assert (
        f"{type(inventory_1).__module__}.{type(inventory_1).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_1.products == {}
    var_3 = inventory_0.remove_product(product_0)
    assert var_3 is False
    var_4 = inventory_0.add_product(product_0)
    assert (
        f"{type(inventory_0.products).__module__}.{type(inventory_0.products).__qualname__}"
        == "builtins.dict"
    )
    assert len(inventory_0.products) == 1
    var_5 = product_0.update_price(var_3)
    var_6 = inventory_0.list_products()
    var_7 = inventory_1.get_product(var_2)
    var_8 = inventory_0.remove_product(none_type_0)
    assert var_8 is True
    assert inventory_0.products == {}
    var_2.restock(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    product_0 = module_0.Product(bool_0, bool_0, bool_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id is False
    assert product_0.name is False
    assert product_0.price is False
    assert product_0.quantity == 0
    var_0 = product_0.sell(bool_0)
    assert var_0 == 0
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_1 = inventory_0.total_inventory_value()
    assert var_1 == 0
    var_2 = inventory_0.remove_product(product_0)
    assert var_2 is False
    var_3 = inventory_0.add_product(product_0)
    assert (
        f"{type(inventory_0.products).__module__}.{type(inventory_0.products).__qualname__}"
        == "builtins.dict"
    )
    assert len(inventory_0.products) == 1
    var_4 = inventory_0.get_product(bool_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "src.inventory.Product"
    )
    assert var_4.product_id is False
    assert var_4.name is False
    assert var_4.price is False
    assert var_4.quantity == 0
    var_5 = inventory_0.remove_product(bool_0)
    assert var_5 is True
    assert inventory_0.products == {}
    var_6 = product_0.restock(var_5)
    assert product_0.quantity == 1
    assert var_4.quantity == 1
    var_4.list_products()


def test_case_14():
    set_0 = set()
    int_0 = -2888
    list_0 = [int_0, set_0, set_0, int_0]
    product_0 = module_0.Product(list_0, list_0, set_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id == [-2888, {*()}, {*()}, -2888]
    assert product_0.name == [-2888, {*()}, {*()}, -2888]
    assert product_0.price == {*()}
    assert product_0.quantity == 0
    with pytest.raises(ValueError):
        product_0.sell(int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    bool_0 = False
    product_0 = module_0.Product(none_type_0, none_type_0, bool_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id is None
    assert product_0.name is None
    assert product_0.price is False
    assert product_0.quantity == 0
    var_0 = product_0.sell(bool_0)
    assert var_0 == 0
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    var_1 = inventory_0.total_inventory_value()
    assert var_1 == 0
    var_2 = inventory_0.remove_product(product_0)
    assert var_2 is False
    var_3 = inventory_0.add_product(product_0)
    assert (
        f"{type(inventory_0.products).__module__}.{type(inventory_0.products).__qualname__}"
        == "builtins.dict"
    )
    assert len(inventory_0.products) == 1
    var_4 = inventory_0.total_inventory_value()
    assert var_4 == 0
    var_5 = product_0.update_price(var_2)
    var_6 = inventory_0.get_product(bool_0)
    var_3.remove_product(var_6)


def test_case_16():
    none_type_0 = None
    bool_0 = False
    product_0 = module_0.Product(none_type_0, none_type_0, bool_0)
    assert (
        f"{type(product_0).__module__}.{type(product_0).__qualname__}"
        == "src.inventory.Product"
    )
    assert product_0.product_id is None
    assert product_0.name is None
    assert product_0.price is False
    assert product_0.quantity == 0
    var_0 = product_0.update_price(bool_0)
    inventory_0 = module_0.Inventory()
    assert (
        f"{type(inventory_0).__module__}.{type(inventory_0).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_0.products == {}
    inventory_1 = module_0.Inventory()
    assert (
        f"{type(inventory_1).__module__}.{type(inventory_1).__qualname__}"
        == "src.inventory.Inventory"
    )
    assert inventory_1.products == {}
    var_1 = inventory_0.remove_product(product_0)
    assert var_1 is False
    var_2 = inventory_0.remove_product(none_type_0)
    assert var_2 is False
    var_3 = inventory_0.add_product(product_0)
    assert (
        f"{type(inventory_0.products).__module__}.{type(inventory_0.products).__qualname__}"
        == "builtins.dict"
    )
    assert len(inventory_0.products) == 1
    var_4 = inventory_1.list_products()
    var_5 = inventory_0.get_product(bool_0)
    with pytest.raises(ValueError):
        inventory_0.add_product(product_0)
