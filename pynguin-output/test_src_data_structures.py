# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src.data_structures as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 1828.70138
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.find(float_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.size == 0
    var_1 = linked_list_1.append(float_0)
    assert (
        f"{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_1.size == 1
    node_0 = module_0.Node(float_0)
    var_1.get_size()


@pytest.mark.xfail(strict=True)
def test_case_1():
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.find(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.append(var_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    bool_0 = True
    var_2 = linked_list_0.append(linked_list_0)
    assert linked_list_0.size == 2
    var_3 = linked_list_0.append(linked_list_0)
    assert linked_list_0.size == 3
    var_4 = linked_list_0.delete(bool_0)
    assert var_4 is False
    tuple_0 = (var_0, var_4, var_0)
    var_0.append(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.get_size()
    assert var_0 == 0
    var_1 = linked_list_0.find(var_0)
    assert var_1 is False
    var_2 = linked_list_0.add(var_0)
    assert linked_list_0.size == 1
    var_3 = linked_list_0.find(var_2)
    assert var_3 is False
    var_2.append(var_2)


def test_case_3():
    bytes_0 = b"*\xa9"
    node_0 = module_0.Node(bytes_0)
    bytes_1 = b"\x85\x80\x16\xfb\x80\xd6\xba\xe1\xe1\xf7\x06\x93"
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.delete(bytes_1)
    assert var_0 is False
    node_1 = module_0.Node(bytes_1)


def test_case_4():
    dict_0 = {}
    node_0 = module_0.Node(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    list_0 = []
    node_0 = module_0.Node(list_0)
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.add(none_type_0)
    assert linked_list_0.size == 1
    var_1 = linked_list_0.delete(node_0)
    assert var_1 is False
    var_1.delete(var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.delete(bool_0)
    assert var_0 is False
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.size == 0
    var_1 = linked_list_1.get_size()
    assert var_1 == 0
    var_1.delete(linked_list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.find(linked_list_0)
    assert var_0 is False
    var_1 = linked_list_0.append(var_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    bool_0 = True
    var_2 = linked_list_0.append(linked_list_0)
    assert linked_list_0.size == 2
    var_3 = linked_list_0.append(var_1)
    assert linked_list_0.size == 3
    var_4 = linked_list_0.append(linked_list_0)
    assert linked_list_0.size == 4
    var_5 = linked_list_0.delete(bool_0)
    assert var_5 is False
    var_6 = linked_list_0.add(var_4)
    assert linked_list_0.size == 5
    var_6.is_empty()


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 4027
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.delete(int_0)
    assert var_0 is False
    var_1 = linked_list_0.add(int_0)
    assert linked_list_0.size == 1
    none_type_0 = None
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.size == 0
    var_2 = linked_list_0.find(none_type_0)
    assert var_2 is False
    var_3 = linked_list_0.append(linked_list_1)
    assert linked_list_0.size == 2
    var_4 = linked_list_0.add(var_0)
    assert linked_list_0.size == 3
    var_5 = linked_list_0.find(var_1)
    assert var_5 is False
    bool_0 = True
    var_3.find(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 4000
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.delete(int_0)
    assert var_0 is False
    var_1 = linked_list_0.add(int_0)
    assert linked_list_0.size == 1
    none_type_0 = None
    var_2 = linked_list_0.find(int_0)
    assert var_2 is True
    tuple_0 = (var_0, int_0, var_2)
    dict_0 = {var_2: var_2, none_type_0: tuple_0, tuple_0: var_0, none_type_0: tuple_0}
    var_1.add(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    bool_0 = True
    var_0 = linked_list_0.append(bool_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    var_1 = linked_list_0.delete(var_0)
    assert var_1 is False
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.size == 0
    var_2 = linked_list_0.delete(bool_0)
    assert var_2 is True
    assert linked_list_0.head is None
    assert linked_list_0.size == 0
    var_2.is_empty()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1]
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.get_size()
    assert var_0 == 0
    var_1 = linked_list_0.append(linked_list_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "src.data_structures.Node"
    )
    assert linked_list_0.size == 1
    linked_list_1 = module_0.LinkedList()
    assert linked_list_1.size == 0
    var_2 = linked_list_0.append(list_0)
    assert linked_list_0.size == 2
    var_3 = linked_list_1.delete(bool_1)
    assert var_3 is False
    var_4 = linked_list_0.append(var_3)
    assert linked_list_0.size == 3
    var_5 = linked_list_0.delete(list_0)
    assert var_5 is True
    assert linked_list_0.size == 2
    var_5.add(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    linked_list_0 = module_0.LinkedList()
    assert linked_list_0.size == 0
    var_0 = linked_list_0.add(linked_list_0)
    assert linked_list_0.size == 1
    var_1 = linked_list_0.append(var_0)
    assert linked_list_0.size == 2
    var_2 = linked_list_0.add(linked_list_0)
    assert linked_list_0.size == 3
    var_3 = linked_list_0.delete(var_0)
    assert var_3 is True
    assert linked_list_0.size == 2
    none_type_0 = None
    var_4 = linked_list_0.get_size()
    assert var_4 == 2
    var_5 = linked_list_0.is_empty()
    var_6 = linked_list_0.append(var_2)
    assert linked_list_0.size == 3
    var_7 = linked_list_0.get_size()
    assert var_7 == 3
    var_6.add(none_type_0)
