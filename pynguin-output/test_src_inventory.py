# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import src.inventory as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    bool_1 = True
    inventory_0 = module_0.Inventory()
    none_type_0 = None
    product_0 = module_0.Product(inventory_0, inventory_0, none_type_0)
    assert product_0.quantity == 0
    var_0 = product_0.update_price(bool_1)
    assert product_0.price is True
    var_0.update_price(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 0
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    var_0 = product_0.sell(int_0)
    assert var_0 == 0
    var_1 = product_0.restock(int_0)
    int_0.total_inventory_value()


def test_case_2():
    inventory_0 = module_0.Inventory()
    var_0 = inventory_0.get_product(inventory_0)
    product_0 = module_0.Product(var_0, var_0, var_0)
    assert product_0.quantity == 0
    var_1 = inventory_0.total_inventory_value()


def test_case_3():
    inventory_0 = module_0.Inventory()
    none_type_0 = None
    var_0 = inventory_0.remove_product(none_type_0)
    assert var_0 is False


def test_case_4():
    inventory_0 = module_0.Inventory()
    none_type_0 = None
    product_0 = module_0.Product(none_type_0, none_type_0, none_type_0)
    assert product_0.quantity == 0
    var_0 = inventory_0.total_inventory_value()


def test_case_5():
    inventory_0 = module_0.Inventory()


@pytest.mark.xfail(strict=True)
def test_case_6():
    inventory_0 = module_0.Inventory()
    var_0 = inventory_0.total_inventory_value()
    product_0 = module_0.Product(var_0, var_0, inventory_0)
    assert product_0.quantity == 0
    product_1 = module_0.Product(var_0, var_0, var_0)
    assert product_1.quantity == 0
    var_1 = inventory_0.list_products()
    var_1.list_products()


def test_case_7():
    bool_0 = True
    bool_1 = True
    product_0 = module_0.Product(bool_1, bool_0, bool_1)
    assert product_0.quantity == 0
    with pytest.raises(ValueError):
        product_0.sell(bool_0)


def test_case_8():
    bytes_0 = b"|g\x92\xd8\xa2\xa0\x02\x07\x96\x1dR"
    int_0 = -20
    inventory_0 = module_0.Inventory()
    var_0 = inventory_0.remove_product(bytes_0)
    assert var_0 is False
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    with pytest.raises(ValueError):
        product_0.sell(int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 0
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    var_0 = product_0.update_price(int_0)
    inventory_0 = module_0.Inventory()
    var_1 = inventory_0.add_product(product_0)
    assert len(inventory_0.products) == 1
    var_1.restock(int_0)


def test_case_10():
    int_0 = -23
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    with pytest.raises(ValueError):
        product_0.update_price(int_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 0
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    var_0 = product_0.update_price(int_0)
    var_1 = product_0.sell(int_0)
    assert var_1 == 0
    var_2 = product_0.restock(var_1)
    inventory_0 = module_0.Inventory()
    var_3 = inventory_0.total_inventory_value()
    var_4 = inventory_0.add_product(product_0)
    assert len(inventory_0.products) == 1
    inventory_1 = module_0.Inventory()
    var_5 = inventory_1.add_product(product_0)
    var_6 = inventory_1.get_product(product_0)
    var_7 = inventory_1.total_inventory_value()
    assert var_7 == 0
    var_1.add_product(var_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 0
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    var_0 = product_0.update_price(int_0)
    var_1 = product_0.sell(int_0)
    assert var_1 == 0
    var_2 = product_0.restock(var_1)
    inventory_0 = module_0.Inventory()
    var_3 = inventory_0.total_inventory_value()
    var_4 = inventory_0.add_product(product_0)
    assert len(inventory_0.products) == 1
    list_0 = [int_0, int_0, int_0, var_2]
    inventory_1 = module_0.Inventory()
    var_5 = inventory_1.add_product(product_0)
    var_6 = inventory_1.get_product(product_0)
    var_7 = inventory_1.total_inventory_value()
    assert var_7 == 0
    var_8 = inventory_0.get_product(var_7)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "src.inventory.Product"
    )
    assert var_8.product_id == 0
    assert var_8.name == 0
    assert var_8.price == 0
    assert var_8.quantity == 0
    var_1.add_product(list_0)


def test_case_13():
    float_0 = -3833.30543
    tuple_0 = ()
    int_0 = 3173
    tuple_1 = (tuple_0, int_0)
    product_0 = module_0.Product(tuple_0, tuple_1, tuple_1, tuple_0)
    with pytest.raises(ValueError):
        product_0.restock(float_0)


def test_case_14():
    int_0 = 0
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    var_0 = product_0.update_price(int_0)
    var_1 = product_0.sell(int_0)
    assert var_1 == 0
    var_2 = product_0.restock(var_1)
    int_1 = 1538
    inventory_0 = module_0.Inventory()
    var_3 = inventory_0.remove_product(int_1)
    assert var_3 is False
    inventory_1 = module_0.Inventory()
    var_4 = inventory_1.total_inventory_value()
    var_5 = inventory_1.add_product(product_0)
    assert len(inventory_1.products) == 1
    with pytest.raises(ValueError):
        inventory_1.add_product(product_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 0
    product_0 = module_0.Product(int_0, int_0, int_0)
    assert product_0.quantity == 0
    var_0 = product_0.update_price(int_0)
    var_1 = product_0.sell(int_0)
    assert var_1 == 0
    var_2 = product_0.restock(var_1)
    int_1 = 1538
    inventory_0 = module_0.Inventory()
    var_3 = inventory_0.remove_product(int_1)
    assert var_3 is False
    inventory_1 = module_0.Inventory()
    var_4 = inventory_1.total_inventory_value()
    var_5 = inventory_1.add_product(product_0)
    assert len(inventory_1.products) == 1
    var_6 = inventory_1.remove_product(int_0)
    inventory_2 = module_0.Inventory()
    var_7 = inventory_2.add_product(product_0)
    var_8 = inventory_2.get_product(product_0)
    var_9 = inventory_2.total_inventory_value()
    assert var_9 == 0
    var_1.add_product(var_1)
